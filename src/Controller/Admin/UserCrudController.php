<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Helpers\Utils;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\KeyValueStore;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IdField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Field\HiddenField;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;

class UserCrudController extends AbstractCrudController
{
    protected $encoder;

    public function __construct(UserPasswordEncoderInterface $encoder)
    {
        $this->encoder = $encoder;
    }

    public static function getEntityFqcn(): string
    {
        return User::class;
    }

    public function createEditForm(EntityDto $entityDto, KeyValueStore $formOptions, AdminContext $context): FormInterface
    {
        //$password = $entityDto->getInstance()->getPassword();
        //$entityDto->getInstance()->setPassword(' ');
        return parent::createEditForm($entityDto, $formOptions, $context); // TODO: Change the autogenerated stub
    }

    function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $password = $this->encoder->encodePassword($entityInstance, $entityInstance->getPassword());
        $entityInstance->setPassword($password);
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $dbPassword = $this->getPasswordFromDB($entityInstance->getId(), $entityManager);

        if ($dbPassword == $entityInstance->getPassword()) {
            $password = $dbPassword;
        } else {
            $password = $this->encoder->encodePassword($entityInstance, $entityInstance->getPassword());
        }

        $entityInstance->setPassword($password);

        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    function getPasswordFromDB($id = 0, EntityManagerInterface $entityManager) {
        $conn = $entityManager->getConnection();
        $sql = 'SELECT password from user where id = ' . $id;
        $stmt = $conn->prepare($sql);
        $stmt->execute();

        return $stmt->fetchColumn();
    }

    function configureActions(Actions $actions): Actions
    {
        return parent::configureActions($actions); // TODO: Change the autogenerated stub
    }


    public function configureFields(string $pageName): iterable
    {
        $passwordRequired = $pageName == "new" ? true : false;

        return [
            IdField::new('id')->hideOnForm(),
            TextField::new('firstname'),
            TextField::new('lastname'),
            EmailField::new('email'),
            TextField::new( 'password', null)->setRequired($passwordRequired),
            ChoiceField::new('roles')->setChoices(User::ROLES)->allowMultipleChoices(),
            //ImageField::new('photo'),
        ];
    }

}
